void glActiveTexture(GLenum texture);
    inline es1, es2
    alt_name glActiveTextureARB

void glAttachShader(GLuint program, GLuint shader);
    shader_only yes
    inline es2
    alt_name glAttachObjectARB

void glBindAttribLocation(GLuint program, GLuint index, const char* name);
    shader_only yes
    inline es2
    alt_name glBindAttribLocationARB

void glBindBuffer(GLenum target, GLuint buffer);
    inline es1, es2

void glBindFramebuffer(GLenum target, GLuint framebuffer);
    inline es2

void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
    inline es2

void glBindTexture(GLenum target, GLuint texture);
    inline all

void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
    inline es2

void glBlendEquation( GLenum mode );
    inline es2

void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
    inline es2
    special_handling yes

void glBlendFunc(GLenum sfactor, GLenum dfactor);
    inline all

void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    inline es2
    special_handling yes

void glBufferData(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
    inline es1, es2

void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
    inline es1, es2

GLenum glCheckFramebufferStatus(GLenum target);
    inline es2

void glClear(GLbitfield mask);
    inline all

void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
    inline all

void glClearDepth(GLclampf depth);
    inline all
    es_name glClearDepthf

void glClearStencil(GLint s);
    inline all

void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    inline all

void glCompileShader(GLuint shader);
    shader_only yes
    inline es2
    alt_name glCompileShader

void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data);
    inline es1, es2

void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data);
    inline es1, es2

void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    inline all

void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    inline all

GLuint glCreateProgram(void);
    shader_only yes
    inline es2
    alt_name glCreateProgramObjectARB

GLuint glCreateShader(GLenum type);
    shader_only yes
    inline es2
    alt_name glCreateShaderObjectARB

void glCullFace(GLenum mode);
    inline all

void glDeleteBuffers(GLsizei n, const GLuint* buffers);
    inline es1, es2

void glDeleteFramebuffers(GLsizei n, const GLuint* framebuffers);
    inline es2

void glDeleteProgram(GLuint program);
    shader_only yes
    inline es2
    alt_name glDeleteObjectARB

void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
    inline es2

void glDeleteShader(GLuint shader);
    shader_only yes
    inline es2
    alt_name glDeleteObjectARB

void glDeleteTextures(GLsizei n, const GLuint* textures);
    inline all

void glDepthFunc(GLenum func);
    inline all

void glDepthMask(GLboolean flag);
    inline all

void glDepthRange(GLclampf zNear, GLclampf zFar);
    inline all
    es_name glDepthRangef

void glDetachShader(GLuint program, GLuint shader);
    shader_only yes
    inline es2
    alt_name glDetachObjectARB

void glDisable(GLenum cap);
    inline all

void glDisableVertexAttribArray(GLuint index);
    shader_only yes
    inline es2
    alt_name glDisableVertexAttribArrayARB

void glDrawArrays(GLenum mode, GLint first, GLsizei count);
    inline all

void glDrawElements(GLenum mode, GLsizei count, GLenum type, const void* indices);
    inline all

void glEnable(GLenum cap);
    inline all

void glEnableVertexAttribArray(GLuint index);
    shader_only yes
    inline es2
    alt_name glEnableVertexAttribArrayARB

void glFinish(void);
    inline all

void glFlush(void);
    inline all

void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
    inline es2

void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
    inline es2

void glFrontFace(GLenum mode);
    inline all

void glGenBuffers(GLsizei n, GLuint* buffers);
    inline es1, es2

void glGenerateMipmap(GLenum target);
    inline es2

void glGenFramebuffers(GLsizei n, GLuint* framebuffers);
    inline es2

void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
    inline es2

void glGenTextures(GLsizei n, GLuint* textures);
    inline all

void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
    shader_only yes
    inline es2
    alt_name glGetActiveAttribARB

void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name);
    shader_only yes
    inline es2
    alt_name glGetActiveUniformARB

void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders);
    shader_only yes
    inline es2
    alt_name glGetAttachedObjectsARB

int glGetAttribLocation(GLuint program, const char* name);
    shader_only yes
    inline es2
    alt_name glGetAttribLocationARB

void glGetBooleanv(GLenum pname, GLboolean* params);
    inline all

void glGetBufferParameteriv(GLenum target, GLenum pname, GLint* params);
    inline es2

GLenum glGetError(void);
    inline all

void glGetFloatv(GLenum pname, GLfloat* params);
    inline all

void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint* params);
    inline es2

void glGetIntegerv(GLenum pname, GLint* params);
    inline all

void glGetProgramiv(GLuint program, GLenum pname, GLint* params);
    shader_only yes
    inline es2
    alt_name glGetObjectParameterivARB

void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei* length, char* infolog);
    shader_only yes
    inline es2
    alt_name glGetInfoLogARB

void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
    inline es2

void glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
    shader_only yes
    inline es2
    alt_name glGetObjectParameterivARB

void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog);
    shader_only yes
    inline es2
    alt_name glGetInfoLogARB

void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision);
    shader_only yes
    inline es2
    special_handling yes

void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei* length, char* source);
    shader_only yes
    inline es2
    alt_name glGetShaderSourceARB

const GLubyte* glGetString(GLenum name);
    inline all

void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
    inline all

void glGetTexParameteriv(GLenum target, GLenum pname, GLint* params);
    inline all

void glGetUniformfv(GLuint program, GLint location, GLfloat* params);
    shader_only yes
    inline es2
    alt_name glGetUniformfvARB

void glGetUniformiv(GLuint program, GLint location, GLint* params);
    shader_only yes
    inline es2
    alt_name glGetUniformivARB

int glGetUniformLocation(GLuint program, const char* name);
    shader_only yes
    inline es2
    alt_name glGetUniformLocationARB

void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat* params);
    shader_only yes
    inline es2
    alt_name glGetVertexAttribfvARB

void glGetVertexAttribiv(GLuint index, GLenum pname, GLint* params);
    shader_only yes
    inline es2
    alt_name glGetVertexAttribivARB

void glGetVertexAttribPointerv(GLuint index, GLenum pname, void** pointer);
    shader_only yes
    inline es2
    alt_name glGetVertexAttribPointervARB

void glHint(GLenum target, GLenum mode);
    inline all

GLboolean glIsBuffer(GLuint buffer);
    inline es1, es2

GLboolean glIsEnabled(GLenum cap);
    inline all

GLboolean glIsFramebuffer(GLuint framebuffer);
    inline es2

GLboolean glIsProgram(GLuint program);
    shader_only yes
    inline es2
    alt_name glIsProgramARB
    special_handling yes

GLboolean glIsRenderbuffer(GLuint renderbuffer);
    inline es2

GLboolean glIsShader(GLuint shader);
    shader_only yes
    inline es2
    alt_name glIsShaderARB
    special_handling yes

GLboolean glIsTexture(GLuint texture);
    inline all

void glLineWidth(GLfloat width);
    inline all

void glLinkProgram(GLuint program);
    shader_only yes
    inline es2
    alt_name glLinkProgramARB

void glPixelStorei(GLenum pname, GLint param);
    inline all

void glPolygonOffset(GLfloat factor, GLfloat units);
    inline all

void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
    inline all

void glReleaseShaderCompiler(void);
    shader_only yes
    inline es2
    alt_name glReleaseShaderCompilerARB
    special_handling yes

void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    inline es2

void glSampleCoverage(GLclampf value, GLboolean invert);
    inline es1, es2

void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
    inline all

void glShaderBinary(GLint n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLint length);
    shader_only yes
    inline es2
    alt_name glShaderBinaryARB
    special_handling yes

void glShaderSource(GLuint shader, GLsizei count, const char** string, const GLint* length);
    shader_only yes
    inline es2
    alt_name glShaderSourceARB

void glStencilFunc(GLenum func, GLint ref, GLuint mask);
    inline all

void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
    inline es2
    special_handling yes

void glStencilMask(GLuint mask);
    inline all

void glStencilMaskSeparate(GLenum face, GLuint mask);
    inline es2
    special_handling yes

void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
    inline all

void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
    inline es2
    special_handling yes

void glTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels);
    inline all

void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
    inline all

void glTexParameterfv(GLenum target, GLenum pname, const GLfloat* params);
    inline all

void glTexParameteri(GLenum target, GLenum pname, GLint param);
    inline all

void glTexParameteriv(GLenum target, GLenum pname, const GLint* params);
    inline all

void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels);
    inline all

void glUniform1f(GLint location, GLfloat x);
    shader_only yes
    inline es2
    alt_name glUniform1fARB

void glUniform1fv(GLint location, GLsizei count, const GLfloat* v);
    shader_only yes
    inline es2
    alt_name glUniform1fvARB

void glUniform1i(GLint location, GLint x);
    shader_only yes
    inline es2
    alt_name glUniform1iARB

void glUniform1iv(GLint location, GLsizei count, const GLint* v);
    shader_only yes
    inline es2
    alt_name glUniform1ivARB

void glUniform2f(GLint location, GLfloat x, GLfloat y);
    shader_only yes
    inline es2
    alt_name glUniform2fARB

void glUniform2fv(GLint location, GLsizei count, const GLfloat* v);
    shader_only yes
    inline es2
    alt_name glUniform2fvARB

void glUniform2i(GLint location, GLint x, GLint y);
    shader_only yes
    inline es2
    alt_name glUniform2iARB

void glUniform2iv(GLint location, GLsizei count, const GLint* v);
    shader_only yes
    inline es2
    alt_name glUniform2ivARB

void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z);
    shader_only yes
    inline es2
    alt_name glUniform3fARB

void glUniform3fv(GLint location, GLsizei count, const GLfloat* v);
    shader_only yes
    inline es2
    alt_name glUniform3fvARB

void glUniform3i(GLint location, GLint x, GLint y, GLint z);
    shader_only yes
    inline es2
    alt_name glUniform3iARB

void glUniform3iv(GLint location, GLsizei count, const GLint* v);
    shader_only yes
    inline es2
    alt_name glUniform3ivARB

void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    shader_only yes
    inline es2
    alt_name glUniform4fARB

void glUniform4fv(GLint location, GLsizei count, const GLfloat* v);
    shader_only yes
    inline es2
    alt_name glUniform4fvARB

void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w);
    shader_only yes
    inline es2
    alt_name glUniform4iARB

void glUniform4iv(GLint location, GLsizei count, const GLint* v);
    shader_only yes
    inline es2
    alt_name glUniform4ivARB

void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    shader_only yes
    inline es2
    alt_name glUniformMatrix2fvARB

void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    shader_only yes
    inline es2
    alt_name glUniformMatrix3fvARB

void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
    shader_only yes
    inline es2
    alt_name glUniformMatrix4fvARB

void glUseProgram(GLuint program);
    shader_only yes
    inline es2
    alt_name glUseProgramObjectARB

void glValidateProgram(GLuint program);
    shader_only yes
    inline es2
    alt_name glValidateProgramARB

void glVertexAttrib1f(GLuint indx, GLfloat x);
    shader_only yes
    inline es2
    alt_name glVertexAttrib1fARB

void glVertexAttrib1fv(GLuint indx, const GLfloat* values);
    shader_only yes
    inline es2
    alt_name glVertexAttrib1fvARB

void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y);
    shader_only yes
    inline es2
    alt_name glVertexAttrib2fARB

void glVertexAttrib2fv(GLuint indx, const GLfloat* values);
    shader_only yes
    inline es2
    alt_name glVertexAttrib2fvARB

void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
    shader_only yes
    inline es2
    alt_name glVertexAttrib3fARB

void glVertexAttrib3fv(GLuint indx, const GLfloat* values);
    shader_only yes
    inline es2
    alt_name glVertexAttrib3fvARB

void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    shader_only yes
    inline es2
    alt_name glVertexAttrib4fARB

void glVertexAttrib4fv(GLuint indx, const GLfloat* values);
    shader_only yes
    inline es2
    alt_name glVertexAttrib4fvARB

void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr);
    shader_only yes
    inline es2
    alt_name glVertexAttribPointerARB

void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
    inline all
