/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\group qt3d::painting
\title Qt/3D Painting
\keyword Qt/3D Painting

Porting between desktop OpenGL and embedded OpenGL/ES has traditionally
been difficult.  The usual sequence of operations for a drawing request
in OpenGL consists of:

\list
    \o Select an appropriate shader program, or fixed-function pipeline
       rendering options.
    \o Set or adjust the current projection and modelview matrices.
    \o Specify vertex, normal, texture co-ordinate, and other attribute arrays.
    \o Specify textures, variables, and other rendering objects needed
       by the shader program.
    \o Draw fragments: triangles, triangle fans, quads, etc.
    \o Disable the arrays, textures, and modes that were selected.
\endlist

Desktop OpenGL, OpenGL/ES 1.1, and OpenGL/ES 2.0 all posses functionality
for the above, but they are all different.  OpenGL/ES 2.0 in particular
presents unique problems because it lacks a fixed-function pipeline mode
to perform common painting operations.

In Qt/3D the QGLPainter class wraps OpenGL to present a consistent
OpenGL painting API across all platforms.  Shaders and fixed-function
options are supplied as an instance of QGLAbstractEffect.  Several
built-in standard effects are provided for drawing with flat colors,
material-based lighting, and simple texturing.

The tutorial "\l{Converting raw GL applications to use QGLPainter}"
compares a raw GL application that draws a triangle with its
QGLPainter counterpart.

\generatelist{related}
*/
