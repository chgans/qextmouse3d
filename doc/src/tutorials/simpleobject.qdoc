/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \title Applying transformations and materials to objects
    \example tutorials/cube4

    In this tutorial we will apply transformations and materials to a
    simple cube object to demonstrate how to modify the QGLPainter
    state to achieve different effects.  We start by declaring a
    view class to show our cube on the screen:

    \snippet tutorials/cube1/cubeview.h 1

    QGLView provides most of the logic for initializing the view,
    setting the camera position, and handling navigation via
    keyboard and mouse events.  In the constructor we use
    QGLBuilder to create the geometry for the cube object that
    we will be using in later steps:

    \snippet tutorials/cube1/cubeview.cpp 1

    Then it is a simple matter to draw the object in our \c{paintGL()}
    method:

    \snippet tutorials/cube1/cubeview.cpp 2

    If we run the program now, we get the following output, which isn't
    very cube-like:

    \image tutorials/cube1-screenshot.png

    The problem is that we are looking at the cube straight onto its
    front face.  So the rest of the cube is hidden from our view and
    it looks like a square.  Let's modify the modelview transformation
    matrix a little bit to apply a 45 degree rotation around the
    axis (1, 1, 1):

    \snippet tutorials/cube2/cubeview.cpp 2

    Now the results are a little better:

    \image tutorials/cube2-screenshot.png

    The cube is still a little odd-looking however.  This is because
    up until now we have been using the default flat color effect
    in QGLPainter that colors the faces with a uniform color
    (white in this case).  So let's change to a lit material effect
    with a nice green color:

    \snippet tutorials/cube3/cubeview.cpp 2

    That's much better; now it looks like a cube:

    \image tutorials/cube3-screenshot.png

    To complete this tutorial, let's make the cube a little more
    interesting by adding a texture to the side:

    \snippet tutorials/cube4/cubeview.h 1
    \dots
    \snippet tutorials/cube4/cubeview.h 2
    \snippet tutorials/cube4/cubeview.cpp 1
    \dots
    \snippet tutorials/cube4/cubeview.cpp 2
    \snippet tutorials/cube4/cubeview.cpp 3

    \image tutorials/cube4-screenshot.png

    \l{qt3d-tutorials.html}{Return to the main Tutorials page}.
*/
