/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \title Converting raw GL applications to use QGLPainter
    \example tutorials/converting

    \raw HTML
    <table align="left" width="100%">
    <tr><td>
    \endraw
    In this tutorial, we will show how to convert an existing application
    that uses QGLWidget and raw GL function calls to use QGLPainter.
    In the process, we will show some of the portability challenges that
    are presented by raw GL and how QGLPainter addresses them.

    The application we are going to build does the following during
    each paint event:

    \list
    \o Clear the window to the background role color from the window's palette.
    \o Set up a standard orthographic projection.
    \o Draw a green triangle in the upper left corner of the window.
    \endlist

    \raw HTML
    </td><td align="right">
    \endraw
    \image tutorials/converting-screenshot.png
    \raw HTML
    </td></tr>
    </table>
    \endraw

    \section1 Widget definition and viewport setup

    We start by defining a class that inherits from QGLWidget:

    \quotefromfile tutorials/converting/converting-rawgl.cpp
    \skipuntil class-defn
    \printto QT_OPENGL_ES_2
    \skipuntil endif
    \printto class-defn

    The only difference for using QGLPainter is the inclusion of
    the \c{qglpainter.h} header:

    \snippet tutorials/converting/converting.cpp includes

    Then we override QGLWidget::resizeGL() to set the viewport
    every time the window changes size:

    \snippet tutorials/converting/converting-rawgl.cpp set-viewport

    It isn't necessary to set the viewport with QGLPainter because
    QGLPainter::begin() will take care of setting the correct viewport
    for the drawing surface.

    QGLPainter is a wrapper around QGLContext objects.  In this case,
    we are creating a painter object for the QGLContext associated
    with \c{this} widget.  Multiple QGLPainter objects can be created
    for the same QGLContext, and they will all refer to the same
    shared context state.

    \section1 Painting the scene

    The next step is to start implementing our QGLWidget::paintGL()
    override by clearing the window to the background color.
    First, for raw GL:

    \snippet tutorials/converting/converting-rawgl.cpp clear-window

    With QGLPainter, clearing to the background color is similar:

    \snippet tutorials/converting/converting.cpp clear-window

    As in \c{resizeGL()}, we create a QGLPainter instance for the current
    widget, and then QGLPainter takes care of the platform issues
    for us.

    Now we need to set up the projection and modelview matrices for the view:

    \snippet tutorials/converting/converting-rawgl.cpp set-matrices

    Here we see the difficulty of writing portable GL code: the function
    for setting up an orthographic projection changes in name from
    \c{glOrtho()} for desktop OpenGL to \c{glOrthof()} for
    OpenGL/ES 2.0.  We should also note that the above won't work with
    OpenGL/ES 2.0 which uses shaders instead of fixed function operations
    like \c{glLoadIdentity()} and \c{glOrtho()}.  The QGLPainter equivalent
    is a lot simpler, and will work on all OpenGL platforms, including
    OpenGL/ES 2.0:

    \snippet tutorials/converting/converting.cpp set-matrices

    \raw HTML
    The OpenGL/ES 2.0 equivalent using shaders is given in the
    <a href="tutorials-converting-converting-rawgl-cpp.html">converting-rawgl.cpp</a> source file.
    \endraw

    Finally, we select a color and draw the triangle:

    \snippet tutorials/converting/converting-rawgl.cpp draw

    The QGLPainter equivalent is similar in structure and will also
    work on OpenGL/ES 2.0:

    \snippet tutorials/converting/converting.cpp draw-all

    The code first selects a standard drawing effect.  All QGLPainter drawing
    operations make use of QGLAbstractEffect objects, and there are a number
    of built-in effects for common drawing operations.  In this case,
    we select the QGL::FlatColor effect and set the color.  See
    QGLPainter::setStandardEffect() and QGLAbstractEffect for more
    information on how QGLPainter uses effects.

    Next, the code creates a QVector3DArray instance containing the vertex
    position values.  The positions are then added to the array with
    QVector3DArray::append().

    QVector3DArray is essentially QArray<QVector3D>.  QArray
    is a highly efficient data structure for building large arrays
    of simple vector values.  The array starts by appending to
    preallocated storage on the stack and then moves the data
    to the heap as the array grows in size.

    There is a slight difference to the raw GL example, which used a
    static constant array of vertex values.  The QArray::fromRawData()
    function can be used to load data from static constant arrays.
    In this example, we are building the QVector3DArray on the stack
    every time the scene is painted.

    Last, we set the vertex array and draw the triangle defined by
    the three vertices.  It isn't necessary to explictly enable and
    disable the vertex array: the effect takes care of that for us
    automatically.

    The full \c{paintGL()} function is as follows:

    \snippet tutorials/converting/converting.cpp paintGL

    This code will work on all OpenGL platforms.  Under OpenGL/ES 2.0,
    QGLPainter will transparently implement the QGL::FlatColor effect
    using shaders.  On all other platforms, the fixed function pipeline
    is used to implement the QGL::FlatColor effect.

    \l{qt3d-examples.html}{Return to the main Tutorials page}.
*/
