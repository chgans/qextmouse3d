/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example stereo
    \title Stereo Viewing Example

    The Stereo example shows how to view objects in "stereoscopic 3D" with
    the use of red-cyan viewing glasses, polarized classes, or
    side-by-side rendering.

    \image stereo-screenshot.png

    The example is pretty much the same as the \l{qt3d-examples.html}{other
    examples}, with one small modification to camera initialization:

    \snippet stereo/stereoview.cpp 1

    By setting the QGLCamera::eyeSeparation property to a non-zero value,
    we indicate that we want the \c{paintGL()} function to be called twice.
    The first time, the camera on the QGLPainter is set slightly offset
    for the left eye, and the second time the camera is set slightly offset
    for the right eye.

    The QGLView class supports a number of stereoscopic viewing modes.
    The screenshot above shows the default red-cyan anaglyph mode.
    If the QGLView::stereoType() is changed to QGLView::DoubleWideLeftRight,
    then the two eye images will be rendered side by side:

    \image stereo-wide-screenshot.png

    See the \l{QGLView#Stereo viewing support}{stereo viewing support} 
    section in the QGLView documentation for more information on the
    stereoscopic viewing modes that are supported.

    \l{qt3d-examples.html}{Return to Examples}.
*/
