/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt3D module of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights.  These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
**
**
**
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/


/*!
    \example pvcolor
    \title Per-vertex Color Example

    The Per-vertex color example shows how to create geometry with color
    applied to vertices and interpolated across faces.

    \image pvcolor.png

    The application shows three per-vertex colored Q models, with the color
    interpolated across the faces from green to blue, by OpenGL.  A backdrop
    of a per-vertex colored triangle is added to complete the scene.

    As the application uses QGLView, this scene can be panned and zoomed
    around by using the mouse or keyboard.

    \snippet pvcolor/pvcolor.cpp 0

    To create the scene first the Q model is built - more details on that below.
    This initial model is added to our empty top level scene node, with its
    default location of the origin.

    Then two copies are cloned - this does not duplicate the storage, only the
    top level scene node.  Each copy is positioned left and right, and to the
    rear of the original.

    Finally a nice big triangle is created to show how per-vertex colors work:
    each of the triangles 3 vertices is given a color - red, blue or yellow -
    and the interior of the triangle is automatically filled with interpolated
    values for us by OpenGL (either fixed-function or shader pipeline).

    \snippet pvcolor/pvcolor.cpp 1

    Drawing is simple:  as usual simply override the QGLView's paintGL class and
    insert a call to the top level node's draw function.  This causes all nodes
    to be drawn in position.

    \snippet pvcolor/pvcolor.cpp 2

    This is the buildGeometry() function.  Here a new QGLBuilder is created
    to hold the Q model, and the effect is set on it: QGL::FlatPerVertexColor.

    The remainder of the buildGeometry() function is taken up with some math to
    generate the curving front- and back-faces and sides of the Q.  Typically with
    a model of this complexity it would be loaded from a model file, but here it
    is generated to serve as an example.  The math and other complexity is there-
    fore excluded from these listings.  See the links above for full details.

    \snippet pvcolor/pvcolor.cpp translated

    The vertex values calculated are placed into QVector3DArray instances
    \c{topQOEdge} and \c{topQIEdge}, the inner and outer edges of the Q.
    These are simply tranlsated to give the \c{bottomQOEdge} and \c{bottomQIEdge}
    arrays of vertices.

    \snippet pvcolor/pvcolor.cpp 3

    The vertex values previously calculated are here stored into the primitives \c{in}
    and \c{out}, storing the line of vertices for the inner and outer edges.  These
    edges will be "zipped" together to create the faces.

    A different color is applied for the the inner and outer edges.  This will cause color
    to be interpolated across the faces.

    Finally those faces are generated by the call to \c{addQuadsZipped(in, out)}.

    \l{qt3d-examples.html}{Return to Examples}.
*/
